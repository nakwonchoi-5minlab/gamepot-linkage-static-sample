headless_builder_backup/
[Ll]ibrary/
[Tt]emp/
[Oo]bj/
[Bb]uild/
[Bb]uilds/
[Ll]ogs/

[Ll]ibrary
[Ll]ibrary.*
[Tt]emp.meta

Assets/AssetStoreTools*

# Visual Studio cache directory
.vs/
.vscode/
.vsconfig

# Autogenerated VS/MD/Consulo solution and project files
ExportedObj/
.consulo/
*.csproj
*.unityproj
*.sln
*.suo
*.tmp
*.user
*.userprefs
*.pidb
*.booproj
*.svd
*.pdb
*.opendb
*.csproj.meta
*.unityproj.meta
*.sln.meta
*.suo.meta
*.tmp.meta
*.user.meta
*.userprefs.meta
*.pidb.meta
*.booproj.meta
*.svd.meta
*.pdb.meta
*.opendb.meta

# Unity3D generated meta files
*.pidb.meta
*.pdb.meta

# Unity3D Generated File On Crash Reports
sysinfo.txt

# Builds
*.apk
*.apk.meta
*.unitypackage
*.unitypackage.meta
*Log.log
*Log.log.meta
.DS_Store
.DS_Store.meta
build.log
build.log.meta
Assets/StreamingAssets/AssetBundles*
Assets/StreamingAssets/StreamingAssets*

mpc-win/
.idea
GradleProject
/Assets/Doozy/Editor/Nody/Settings/NodyWindowSettings.asset
NodyWindowSettings.asset
DoozyWindowSettings.asset
ProcessorsSettings.asset

# FBX Export
ProjectSettings\FbxExportSettings.asset

*.log

# Yume
/Assets/YuMe/CustomBrushes
/Assets/YuMe/CustomBrushes.meta
/Assets/Yuponic/YuME/PrototypeTiles/CustomBrushes
/Assets/Yuponic/YuME/PrototypeTiles/CustomBrushes.meta
ProjectSettings/FbxExportSettings.asset


# Odin Inspector with Version Control
# Ignore the auto-generated AOT compatibility dll.
/Assets/Plugins/Sirenix/Assemblies/AOT*

# Ignore all unpacked demos.
/Assets/Plugins/Sirenix/Demos/*

# But keep the demo packages themselves.
!/Assets/Plugins/Sirenix/Demos/*.unitypackage 

#python start
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
# *.so
# *.so.meta

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/
#python end

# crashlytics
crashlytics_build_id.xml
crashlytics_build_id.xml.meta

# firebase
remote_config_data

Assets/_Test/

Assets/_Test.meta

etc/air/scripts/Sample/
etc/air/scripts/Sample/
Assets/StreamingAssets/build_info
Assets/StreamingAssets/build_info.meta

*.autoenv
Assets/Plugins/Editor/JetBrains*

# etc air log and report
etc/air/scripts/log/
etc/air/scripts/report/


!*/**/NeptuneSDK/NTAsset/Scripts/Runtime/Manifest
!*/**/lib_NTSDK.so

#AttackData output
AttackDataCsv/

# screen shot folder
/ScreenShots

# SLPlatformDebugSetup
SLPlatformDebugSetup.asset
SLPlatformDebugSetup.asset.meta
Assets/Editor/x64/Bakery/.denoiserlog.txt
Assets/Editor/x64/Bakery/.ftracelog.txt
Assets/Editor/x64/Bakery/.uvgblog.txt

Assets/External/NeptuneSDK/Editor/gradle.meta
Assets/External/NeptuneSDK/Editor/gradle/lib.meta

MemoryCaptures/*
etc/citrus-gamelift/
etc/citrus-integration-test/

.*sw[a-z]
UserSettings/**
/buildreport.xml

# NCrunch
Assets/Plugins/Editor/NCrunchAdapterForUnity/
Assets/Plugins/Editor/NCrunchAdapterForUnity.meta
pop-client.v3.ncrunchsolution
_NCrunch_pop-client-2020/pop-client-2020.crunchsolution.cache
_NCrunch_pop-client-2020/pop-client-2020.executiontimes.cache

# CustomEditorOption
Assets/Resources/CustomEditorTable.asset
Assets/Resources/CustomEditorTable.asset.meta

# voice list text
voice_list.txt
MSBuild.rsp
tmp

# gamedataTool
gamedata_tool_update.py

_NCrunch_pop-client/pop-client.crunchsolution.cache

_NCrunch_pop-client/pop-client.executiontimes.cache

Bundles*
build.pid

EditorFontResizer.cfg

# fankit exporter
[Ff]ankit/
[Ff]ankit.*
Assets/UnityStreamingAssetsPack.androidpack
